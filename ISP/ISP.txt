interface sergregation principle

პრინციპი რომელიც გვეუბნება რომ კლასი არ უნდა იყოს ვალდებული დააიმპლემენტიროს ისეთი 
ლოგიკა რომელსაც არ იყენებს.

აღნიშნული პრინციპის აღსაქმელად მოვიყვან რამდენიმე ცხოვრებისეულ მაგალითს:

    მაგალითი 1. წარმოვიდგინოთ მაგალითად ბექენდ დეველოპერი რომელიც პროგრამის
    დასაწერად იყენებს ჯავას ენას. Developer კლასი არ უნდა აიმპლემენტირებდეს  Language კლასს,
    რომელშიც გაწერილია ყველა ბექენდ ენა პროგრამირებისთვის: (python, c#, Java, PHP და ა.შ.).
    არამედ უნდა იყოს თითოეული ენა ცალკე ინტერფეისად, რომელსაც თავისი ენის დამახასიათებელი
    კოდის წერის კონტრაქტი ექნება. ამრიგად, developer კლასი დააიმპლემენტირებს JavaLanguage 
    ინტერფეისს რადგან მოთხოვნაა რომ კოდი დაიწეროს java-ს ენაზე. 

    

    მაგალითი 2. მეორე მაგალითად შეგვიძლია მოვიყვანოთ ელექტრომობილები და შიდა წვის ძრავებზე
    მომუშავე ავტომობილები, რომლებსაც უნდა ჰქონდეთ საერთო ფუნქცია Drive და ასევე უნდა შეეძლოთ 
    მუშაობისათვის ან Refuel ან Charge. ენერგიის შევსების ორივე ფუნქცია რომ ერთ ინტერფეისში მოგვეთავსებინა
    Drive ფუნქციასთან ერთად ეს იქნებოდა დარღვევა ინტერფეისების დაყოფის პრინციპისა, რადგან საჭიროა
    გვქონდეს მშობელი კლასი Car რომელსაც ექნება ფუნქცია Drive. ასევე გვექნება ორი დამატებითი ინტერფეისი 
        1.FuelPower;
        2.ElectricPower;

    კლასი ElectricCar დააიმპლემენტირებს Car, ElectricPower ინტერფეისებს, ხოლო GasolineCar დააიმპლემენტირებს
    Car,FuelPower ინტერფეისებს. 